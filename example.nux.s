# Generated by nux 0.0.1
# Starting the internal section
.section .renderlabs
    nux: .byte 1
.section .note.GNU-stack
.macro scall a, b, msg, len
    mov \len, %edx
    lea \msg, %rsi
    mov \a, %edi
    mov \b, %rax
    syscall
.endm
.section .text
.global _strlen
_strlen:
    push %rbp
    mov %rsp, %rbp
    mov 16(%rbp), %rdi
    xor %rax, %rax
.L_strlen_loop:
    cmpb $0, (%rdi, %rax, 1)
    je .L_strlen_end
    inc %rax
    jmp .L_strlen_loop
.L_strlen_end:
    mov %rax, _len(%rip)
    pop %rbp
    ret
.global print
print:
    push %rbp
    mov %rsp, %rbp
    mov 16(%rbp), %rdi
    mov %rdi, _str(%rip)
    call _strlen
    scall $1, $1, _str(%rip), _len(%rip)
    mov %rbp, %rsp
    pop %rbp
    ret
.section .data
    _str: .asciz ""
    _len: .long 0
# Ending the internal variables
# Starting the crate section
# No crates yet.
# Ending the crate section
.section .text
    mov temp_83(%rip), %eax
    mov %eax, a(%rip)
.global main
main:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    # Function body
    mov $0, %eax
    mov %eax, %ebx
    mov %eax, x(%rip)
    mov temp_86(%rip), %eax
    mov %eax, y(%rip)
    mov y(%rip), %rsi
    push %rsi
    call print
    mov x(%rip), %eax
    mov %rbp, %rsp
    pop %rbp
    ret
.global test
test:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    pop %rax
    mov %rax, a(%rip)
    # Function body
    mov a, %eax
    mov %eax, %ebx
    mov %eax, o(%rip)
    mov $1, %eax
    mov %rbp, %rsp
    pop %rbp
    ret
# Starting the variable section
.section .data
a: .asciz ""
temp_83: .asciz ""
x: .long 0

y: .asciz ""
temp_86: .asciz "Hello World"
o: .asciz ""

# Ending the variable section
# End of file
# *
# * Thank You.
# *
